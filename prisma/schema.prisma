generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model follow {
  id                            Int      @id @default(autoincrement())
  follower                      Int
  following                     Int
  created_at                    DateTime @default(now()) @db.Timestamp(6)
  updated_at                    DateTime @default(now()) @db.Timestamp(6)
  users_follow_followerTousers  users    @relation("follow_followerTousers", fields: [follower], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "follow_follower_foreign")
  users_follow_followingTousers users    @relation("follow_followingTousers", fields: [following], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "follow_following_foreign")
}

model games {
  id                     Int          @id @default(autoincrement())
  igdb_id                Int
  name                   String       @db.VarChar(255)
  cover_id               String       @db.VarChar(255)
  original_realease_date DateTime     @db.Date
  platforms              String       @db.VarChar(255)
  genres                 String?      @db.VarChar(255)
  created_at             DateTime     @default(now()) @db.Timestamp(6)
  updated_at             DateTime     @default(now()) @db.Timestamp(6)
  games_tags             games_tags[]
  libraries              libraries[]
  reviews                reviews[]
}

model games_tags {
  id         Int      @id @default(autoincrement())
  game_id    Int
  tag_id     Int
  count      BigInt   @default(0)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  games      games    @relation(fields: [game_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "games_tags_game_id_foreign")
  tags       tags     @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "games_tags_tag_id_foreign")
}

model libraries {
  id              Int      @id @default(autoincrement())
  user_id         Int
  game_id         Int
  finished        Boolean  @default(false)
  completion_time Decimal? @db.Decimal(3, 1)
  platinum        Boolean  @default(false)
  wishlist        Boolean  @default(false)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  games           games    @relation(fields: [game_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "libraries_game_id_foreign")
  users           users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "libraries_user_id_foreign")
}

model reviews {
  id         Int      @id @default(autoincrement())
  user_id    Int
  game_id    Int
  rating     Decimal  @db.Decimal(3, 1)
  votes      BigInt   @default(0)
  text       String   @db.VarChar(1000)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  games      games    @relation(fields: [game_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "reviews_game_id_foreign")
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "reviews_user_id_foreign")
}

model tags {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  created_at DateTime     @default(now()) @db.Timestamp(6)
  updated_at DateTime     @default(now()) @db.Timestamp(6)
  games_tags games_tags[]
}

model users {
  id                             Int         @id @default(autoincrement())
  username                       String      @unique @db.VarChar(30)
  email                          String      @unique @db.VarChar(255)
  password                       String      @db.VarChar(60)
  image_url                      String      @default("https://pbs.twimg.com/media/EhulGMdVoAIgBeN?format=png&name=small")
  created_at                     DateTime    @default(now()) @db.Timestamp(6)
  updated_at                     DateTime    @default(now()) @db.Timestamp(6)
  follow_follow_followerTousers  follow[]    @relation("follow_followerTousers")
  follow_follow_followingTousers follow[]    @relation("follow_followingTousers")
  libraries                      libraries[]
  reviews                        reviews[]
}
